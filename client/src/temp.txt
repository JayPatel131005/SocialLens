import React, { useState, useEffect } from "react";

const App = () => {
  const [countries, setCountries] = useState([]);
  const [states, setStates] = useState([]);
  const [cities, setCities] = useState([]);
  const [selectedCountry, setSelectedCountry] = useState("IN"); // Default country set to India (ISO2: IN)
  const [selectedState, setSelectedState] = useState("");

  const API_KEY = "ZUhUTDZ6UzZEVmlTNXdPdnpyYUFXSDlOVGZNenJ6T0ZpWXJ6V1piaQ==";

  // Fetch all countries on component mount
  useEffect(() => {
    const fetchCountries = async () => {
      try {
        const response = await fetch("https://api.countrystatecity.in/v1/countries", {
          headers: { "X-CSCAPI-KEY": API_KEY },
        });
        const data = await response.json();
        setCountries(data);
      } catch (error) {
        console.error("Error fetching countries:", error);
      }
    };
    fetchCountries();
  }, []);

  // Fetch states when a country is selected or defaulted
  useEffect(() => {
    if (selectedCountry) {
      fetchStates(selectedCountry);
    }
  }, [selectedCountry]);

  // Fetch states based on selected country
  const fetchStates = async (countryIso2) => {
    try {
      const response = await fetch(
        `https://api.countrystatecity.in/v1/countries/${countryIso2}/states`,
        { headers: { "X-CSCAPI-KEY": API_KEY } }
      );
      const data = await response.json();
      setStates(data);
    } catch (error) {
      console.error("Error fetching states:", error);
    }
  };

  // Fetch cities based on selected state
  const fetchCities = async (countryIso2, stateIso2) => {
    try {
      const response = await fetch(
        `https://api.countrystatecity.in/v1/countries/${countryIso2}/states/${stateIso2}/cities`,
        { headers: { "X-CSCAPI-KEY": API_KEY } }
      );
      const data = await response.json();
      setCities(data);
    } catch (error) {
      console.error("Error fetching cities:", error);
    }
  };

  // Handle country change
  const handleCountryChange = (event) => {
    const countryIso2 = event.target.value;
    setSelectedCountry(countryIso2);
    setSelectedState("");
    setCities([]);
    fetchStates(countryIso2);
  };

  // Handle state change
  const handleStateChange = (event) => {
    const stateIso2 = event.target.value;
    setSelectedState(stateIso2);
    fetchCities(selectedCountry, stateIso2);
  };

  return (
    <div>
      <h1>Country, State, and City Selector</h1>
      {/* Country Dropdown */}
      <label htmlFor="country">Select Country:</label>
      <select id="country" value={selectedCountry} onChange={handleCountryChange}>
        <option value="">--Select a Country--</option>
        {countries.map((country) => (
          <option key={country.iso2} value={country.iso2}>
            {country.name}
          </option>
        ))}
      </select>

      {/* State Dropdown */}
      <label htmlFor="state">Select State:</label>
      <select id="state" value={selectedState} onChange={handleStateChange} disabled={!selectedCountry}>
        <option value="">--Select a State--</option>
        {states.map((state) => (
          <option key={state.iso2} value={state.iso2}>
            {state.name}
          </option>
        ))}
      </select>

      {/* City Dropdown */}
      <label htmlFor="city">Select City:</label>
      <select id="city" disabled={!selectedState}>
        <option value="">--Select a City--</option>
        {cities.map((city) => (
          <option key={city.id} value={city.name}>
            {city.name}
          </option>
        ))}
      </select>
    </div>
  );
};

export default App;
